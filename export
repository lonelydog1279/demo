import org.apache.poi.poifs.crypt.EncryptionInfo;
import org.apache.poi.poifs.crypt.EncryptionMode;
import org.apache.poi.poifs.crypt.Encryptor;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.core.io.ByteArrayResource;
import org.apache.commons.codec.binary.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.lang.reflect.Field;
import java.security.SecureRandom;
import java.util.List;
import java.util.stream.Collectors;

public class ExportFileService<T> {

    private List<T> dataList;
    private Class<T> typeClass;
    private List<String> headerList;

    public ExportFileService(List<T> dataList, Class<T> typeClass, List<String> headerList) {
        this.dataList = dataList;
        this.typeClass = typeClass;
        this.headerList = headerList;
    }

    public ByteArrayResource exportToExcel() {
        Workbook workbook = createWorkbook();
        return writeWorkbookToByteArrayResource(workbook);
    }

    public ByteArrayResource exportToExcel(String password) {
        Workbook workbook = createWorkbook();
        return encryptWorkbook(workbook, password);
    }

    public ByteArrayResource exportToCSV() {
        String csvContent = createCSVContent();
        return writeCSVToByteArrayResource(csvContent);
    }

    public ByteArrayResource exportToCSV(String password) {
        String csvContent = createCSVContent();
        return encryptCSV(csvContent, password);
    }

    private Workbook createWorkbook() {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Data");

        // Create header row
        Row headerRow = sheet.createRow(0);
        for (int i = 0; i < headerList.size(); i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headerList.get(i));
        }

        // Create data rows
        for (int i = 0; i < dataList.size(); i++) {
            Row row = sheet.createRow(i + 1);
            T data = dataList.get(i);
            for (int j = 0; j < headerList.size(); j++) {
                Cell cell = row.createCell(j);
                String fieldName = headerList.get(j);
                try {
                    Field field = typeClass.getDeclaredField(fieldName);
                    field.setAccessible(true);
                    Object value = field.get(data);
                    if (value != null) {
                        cell.setCellValue(value.toString());
                    }
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    e.printStackTrace();
                }
            }
        }

        return workbook;
    }

    private ByteArrayResource writeWorkbookToByteArrayResource(Workbook workbook) {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {
            workbook.write(bos);
            workbook.close();
            return new ByteArrayResource(bos.toByteArray());
        } catch (IOException e) {
            System.err.println("Error writing to byte array: " + e.getMessage());
            return null;
        }
    }

    private ByteArrayResource encryptWorkbook(Workbook workbook, String password) {
        try (POIFSFileSystem fs = new POIFSFileSystem();
             ByteArrayOutputStream bos = new ByteArrayOutputStream()) {

            EncryptionInfo info = new EncryptionInfo(EncryptionMode.agile);
            Encryptor encryptor = info.getEncryptor();
            encryptor.confirmPassword(password);

            try (OutputStream os = encryptor.getDataStream(fs)) {
                workbook.write(os);
            }

            workbook.close();

            fs.writeFilesystem(bos);
            return new ByteArrayResource(bos.toByteArray());
        } catch (IOException e) {
            System.err.println("Error encrypting workbook: " + e.getMessage());
            return null;
        }
    }

    private String createCSVContent() {
        StringBuilder sb = new StringBuilder();

        // Add header row
        sb.append(String.join(",", headerList)).append("\n");

        // Add data rows
        for (T data : dataList) {
            List<String> rowValues = headerList.stream().map(fieldName -> {
                try {
                    Field field = typeClass.getDeclaredField(fieldName);
                    field.setAccessible(true);
                    Object value = field.get(data);
                    return value != null ? value.toString() : "";
                } catch (NoSuchFieldException | IllegalAccessException e) {
                    e.printStackTrace();
                    return "";
                }
            }).collect(Collectors.toList());
            sb.append(String.join(",", rowValues)).append("\n");
        }

        return sb.toString();
    }

    private ByteArrayResource writeCSVToByteArrayResource(String csvContent) {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {
            bos.write(csvContent.getBytes());
            return new ByteArrayResource(bos.toByteArray());
        } catch (IOException e) {
            System.err.println("Error writing CSV to byte array: " + e.getMessage());
            return null;
        }
    }

    private ByteArrayResource encryptCSV(String csvContent, String password) {
        try {
            // Generate a key from the password
            byte[] key = password.getBytes("UTF-8");
            KeyGenerator keyGen = KeyGenerator.getInstance("AES");
            SecureRandom secureRandom = new SecureRandom(key);
            keyGen.init(128, secureRandom);
            SecretKey secretKey = keyGen.generateKey();

            // Encrypt the CSV content
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedBytes = cipher.doFinal(csvContent.getBytes("UTF-8"));

            // Encode to Base64 for easy storage/transfer
            String encryptedContent = Base64.encodeBase64String(encryptedBytes);
            return new ByteArrayResource(encryptedContent.getBytes("UTF-8"));
        } catch (Exception e) {
            System.err.println("Error encrypting CSV: " + e.getMessage());
            return null;
        }
    }

    public static void main(String[] args) {
        List<String> headerList = List.of("name", "age", "country");
        List<Person> dataList = List.of(
            new Person("John Doe", 30, "USA"),
            new Person("Jane Smith", 25, "UK"),
            new Person("Jack Johnson", 45, "Canada")
        );

        ExportFileService<Person> exportService = new ExportFileService<>(dataList, Person.class, headerList);

        // Export to Excel without encryption
        ByteArrayResource resource = exportService.exportToExcel();
        if (resource != null) {
            saveToFile(resource, "output.xlsx");
            System.out.println("Data successfully exported to ByteArrayResource without encryption.");
        }

        // Export to Excel with encryption
        ByteArrayResource encryptedResource = exportService.exportToExcel("password123");
        if (encryptedResource != null) {
            saveToFile(encryptedResource, "encrypted_output.xlsx");
            System.out.println("Data successfully exported to ByteArrayResource with encryption.");
        }

        // Export to CSV without encryption
        ByteArrayResource csvResource = exportService.exportToCSV();
        if (csvResource != null) {
            saveToFile(csvResource, "output.csv");
            System.out.println("Data successfully exported to ByteArrayResource as CSV.");
        }

        // Export to CSV with encryption
        ByteArrayResource encryptedCSVResource = exportService.exportToCSV("password123");
        if (encryptedCSVResource != null) {
            saveToFile(encryptedCSVResource, "encrypted_output.csv");
            System.out.println("Data successfully exported to ByteArrayResource as encrypted CSV.");
        }
    }

    private static void saveToFile(ByteArrayResource resource, String
